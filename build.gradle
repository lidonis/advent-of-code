plugins {
    id 'java'
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '1.5.31'
    id 'io.gitlab.arturbosch.detekt' version '1.18.1'
    id 'com.palantir.graal' version '0.9.0'
}

group 'fr.lidonis'
version '1.0-SNAPSHOT'

def jvmVersion = JavaVersion.VERSION_11.toString()

sourceCompatibility = jvmVersion
targetCompatibility = jvmVersion

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2-native-mt"
    implementation "info.picocli:picocli:4.6.1"
    implementation 'org.fusesource.jansi:jansi:2.3.4'

    annotationProcessor "info.picocli:picocli-codegen:4.6.1"

    testImplementation "org.assertj:assertj-core:3.20.2"
    testImplementation "org.junit.jupiter:junit-jupiter:5.8.0"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.8.0"
    testImplementation "io.mockk:mockk:1.12.0"
    testImplementation "org.reflections:reflections:0.9.12"
    testImplementation "org.jetbrains.kotlin:kotlin-reflect"
}

compileJava {
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}

test {
    useJUnitPlatform()
}

application {
    mainClass.set('fr.lidonis.adventofcode.AdventOfCodeMain')
}

graal {
    mainClass application.getMainClass().get()
    outputName rootProject.name
    javaVersion jvmVersion
    option '--static'
}

compileKotlin {
    kotlinOptions {
        jvmTarget = jvmVersion
        freeCompilerArgs = ["-Xopt-in=kotlin.RequiresOptIn"]
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = jvmVersion
    }
}